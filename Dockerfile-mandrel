## Stage 1 : build with maven builder image with native capabilities
FROM ubuntu:18.04 AS build

ARG OBOCO_DATABASE_NAME

RUN apt-get clean
RUN apt-get autoclean
RUN apt-get update && apt-get -y upgrade
RUN apt-get -y install gcc zlib1g-dev build-essential wget

RUN wget https://github.com/graalvm/mandrel/releases/download/mandrel-21.0.0.0.Final/mandrel-java11-linux-amd64-21.0.0.0.Final.tar.gz -P /tmp
RUN tar xf /tmp/mandrel-java11-linux-amd64-21.0.0.0.Final.tar.gz -C /opt
RUN ln -s /opt/mandrel-java11-21.0.0.0.Final /opt/mandrel-java11

ENV JAVA_HOME=/opt/mandrel-java11
ENV GRAALVM_HOME=/opt/mandrel-java11
ENV PATH=${JAVA_HOME}/bin:${PATH}

RUN wget https://www-eu.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz -P /tmp
RUN tar xf /tmp/apache-maven-3.6.3-bin.tar.gz -C /opt
RUN ln -s /opt/apache-maven-3.6.3 /opt/maven

ENV M2_HOME=/opt/maven
ENV MAVEN_HOME=/opt/maven
ENV PATH=${M2_HOME}/bin:${PATH}

RUN mvn --version

COPY pom.xml /usr/src/app/
RUN mvn -f /usr/src/app/pom.xml -B de.qaware.maven:go-offline-maven-plugin:1.2.5:resolve-dependencies
COPY src /usr/src/app/src
COPY src/non-packaged-resources/lib-native/turbojpeg/linux/amd64/libturbojpeg.so /usr/java/packages/lib/libturbojpeg.so
RUN sed -i "s/quarkus\.datasource\.db\-kind\=.*/quarkus\.datasource\.db\-kind\=${OBOCO_DATABASE_NAME}/" /usr/src/app/src/main/resources/application.properties \
 && sed -i "s/quarkus\.datasource\.username\=.*/quarkus\.datasource\.username\=/" /usr/src/app/src/main/resources/application.properties \
 && sed -i "s/quarkus\.datasource\.password\=.*/quarkus\.datasource\.password\=/" /usr/src/app/src/main/resources/application.properties \
 && sed -i "s/quarkus\.datasource\.jdbc\.url\=.*/quarkus\.datasource\.jdbc\.url\=/" /usr/src/app/src/main/resources/application.properties
RUN mvn -f /usr/src/app/pom.xml -Pnative clean package

## Stage 2 : create the docker final image
FROM registry.access.redhat.com/ubi8/ubi-minimal

RUN microdnf update

WORKDIR /work/
COPY --from=build /usr/src/app/target/*-runner /work/application
COPY --from=build /usr/src/app/target/application.properties /work/application.properties
COPY --from=build /usr/src/app/target/data.properties /work/data.properties
COPY --from=build /usr/src/app/target/data /work/data
COPY --from=build /usr/src/app/target/data.csv /work/data.csv
#COPY --from=build /usr/src/app/target/database.ddl /work/database.ddl
#COPY --from=build /usr/src/app/target/database.sql /work/database.sql
COPY --from=build /usr/src/app/target/logs /work/logs
COPY --from=build /usr/src/app/target/lib-native /work/lib-native

COPY application.sh /usr/local/bin/
RUN chmod 777 /usr/local/bin/application.sh

# set up permissions for user `1001`
RUN chmod 775 /work /work/application \
  && chown -R 1001 /work \
  && chmod -R "g+rwX" /work \
  && chown -R 1001:root /work

EXPOSE 8080
USER 1001

CMD ["bash", "/usr/local/bin/application.sh"]